module Computation where

import           Data.ByteString (count)
import           Data.Char       (GeneralCategory (LowercaseLetter))
import           Data.List

-- a Type representing one's mood
data Mood = Angry
          | Sad
          | Neutral
          | Happy
          | Excited deriving (Read, Eq, Ord, Show)


data Intensity = Low
               | Medium
               | High
               | Extreme deriving (Show, Read, Eq, Ord)

-- Enum instance for computing moods together
instance Enum Mood where
    fromEnum Angry   = -2
    fromEnum Sad     = -1
    fromEnum Neutral = 0
    fromEnum Happy   = 1
    fromEnum Excited = 2
    toEnum (-2) = Angry
    toEnum (-1) = Sad
    toEnum 0    = Neutral
    toEnum 1    = Happy
    toEnum 2    = Excited


-- instance Monoid

mean :: (Real a, Fractional a) => [a] -> a
mean ns = total/count
  where total = (realToFrac  . sum) ns
        count = (realToFrac . length) ns

median :: (Num a, Fractional a) => [a] -> a
median ns | even (length ns) =  (length ns `div` 2) !! sorted + (1 + length ns `div` 2) !! sorted 
          | otherwise =
        where sorted = sort ns 

rangeData :: (Num a, Ord a) => [a] -> a
rangeData ns = maximum ns - minimum ns

someFunc :: IO ()
someFunc = putStrLn "building ..."


